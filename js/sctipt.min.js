/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/js/script.js":
/*!***************************!*\
  !*** ./dist/js/script.js ***!
  \***************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\"use struct\"\ndocument.addEventListener('DOMContentLoaded', function(){\n    //==================== Плавный скролл ====================//    \n    const smoothLinks = document.querySelectorAll('a[href^=\"#\"]');\n    for (let smoothLink of smoothLinks) {\n        smoothLink.addEventListener('click', function (e) {\n            e.preventDefault();\n            const id = smoothLink.getAttribute('href');\n    \n            document.querySelector(id).scrollIntoView({\n                behavior: 'smooth',\n                block: 'center'\n            });\n        });\n    };\n//==================== Анимация линий ====================//\n    var svgEl = document.querySelector('.animated-lines');\n\n    var randomRange = function(min, max) {\n    return ~~(Math.random() * (max - min + 1)) + min\n    };\n\n    var numberOfLines = 30,\n    lineDataArr = [];\n\n    var createPathString = function() {\n\n    var completedPath = '',\n        comma = ',',\n        ampl = 50; // pixel range from 0, aka how deeply they bend\n\n    for (var i = 0; i < numberOfLines; i++) {\n\n        var path = lineDataArr[i];\n\n        var current = {\n        x: ampl * Math.sin(path.counter / path.sin),\n        y: ampl * Math.cos(path.counter / path.cos)\n        };\n\n        var newPathSection = 'M' +\n        // starting point\n        path.startX +\n        comma +\n        path.startY +\n        // quadratic control point\n        ' Q' +\n        path.pointX +\n        comma +\n        (current.y * 1.5).toFixed(3) + // 1.5 to amp up the bend a little\n        // center point intersection\n        ' ' +\n        ((current.x) / 10 + path.centerX).toFixed(3) +\n        comma +\n        ((current.y) / 5 + path.centerY).toFixed(3) +\n        // end point with quadratic reflection (T) (so the bottom right mirrors the top left)\n        ' T' +\n        path.endX +\n        comma +\n        path.endY;\n        path.counter++;\n\n        completedPath += newPathSection;\n\n    };\n\n    return completedPath;\n\n    };\n\n    var createLines = function() {\n\n    var newPathEl = document.createElementNS('http://www.w3.org/2000/svg', 'path'),\n        // higher is slower\n        minSpeed = 85,\n        maxSpeed = 150;\n\n    // create an arr which contains objects for all lines\n    // createPathString() will use this array\n    for (var i = 0; i < numberOfLines; i++) {\n\n        var lineDataObj = {\n        counter: randomRange(1, 500), // a broad counter range ensures lines start at different cycles (will look more random)\n        startX: randomRange(-5, -40),\n        startY: randomRange(-5, -30),\n        endX: randomRange(200, 220), // viewbox = 200\n        endY: randomRange(120, 140), // viewbox = 120\n        sin: randomRange(minSpeed, maxSpeed),\n        cos: randomRange(minSpeed, maxSpeed),\n        pointX: randomRange(30, 55),\n        centerX: randomRange(90, 120),\n        centerY: randomRange(60, 70)\n        }\n\n        lineDataArr.push(lineDataObj)\n\n    }\n\n    var animLoop = function() {\n        newPathEl.setAttribute('d', createPathString());\n        requestAnimationFrame(animLoop);\n    }\n\n    // once the path elements are created, start the animation loop\n    svgEl.appendChild(newPathEl);\n    animLoop();\n\n    };\n\n    createLines();\n//==================== Анимация линий ====================//\n    const value = document.querySelectorAll('.calc-cost');\n    const valueDop = document.querySelectorAll('.calc-cost-dop');\n    const checkInput = document.querySelectorAll('.checkbox__input')\n    const items = document.querySelectorAll('._column');\n    const itemsDop = document.querySelectorAll('._dop');\n    const buttons = document.querySelectorAll('.item-calculator__radio');\n    const buttonsAct = document.querySelectorAll('.item-calculator__radio._active');\n    for (let index = 0; index < buttonsAct.length; index++) {\n        const element = buttonsAct[index];\n        value[index].innerHTML = element.getAttribute('data-cost');\n        result(0);\n    }\n\n    for (let index = 0; index < items.length; index++) {\n        const element = items[index];\n        element.addEventListener('click', function(e){\n            if(e.target.closest('.item-calculator__radio')){\n                const cost = e.target.getAttribute('data-cost');\n                value[index].innerHTML = cost;\n                result(0);\n                const children = Array.from(e.target.parentNode.children);\n                for (let index = 0; index < children.length; index++) {\n                    const element = children[index];\n                    if(element.classList.contains(\"_active\")){\n                        element.classList.remove('_active');\n                    }\n                }\n                e.target.classList.add('_active');\n            }\n        })\n    }\n    for (let index = 0; index < itemsDop.length; index++) {\n        const element = itemsDop[index];\n        element.addEventListener('click', function(e){\n            if(e.target.closest('.checkbox__label')){\n                const cost = e.target.previousElementSibling.value;\n                \n                if(e.target.classList.contains(\"_active\")){\n                    e.target.classList.remove(\"_active\");\n                    valueDop[index].innerHTML = Number(valueDop[index].innerHTML) - Number(cost);\n                }else{\n                    e.target.classList.add(\"_active\");\n                    valueDop[index].innerHTML =  Number(cost) + Number(valueDop[index].innerHTML);\n                }\n                result(0);\n                \n            }\n        })\n    }\n    \n\n    function result(reset){\n        let costResult = reset;\n        for (let index = 0; index < value.length; index++) {\n            const element = value[index];\n            costResult = costResult + Number(element.innerHTML);\n        }\n        for (let index = 0; index < valueDop.length; index++) {\n            const element = valueDop[index];\n            costResult = costResult + Number(element.innerHTML);\n        }\n        document.getElementById('result').innerHTML =  costResult;\n    }\n    // Форма калькулятора ========================\n    const buttonF = document.querySelector('.item-calculator__button');\n    const blockHide = document.querySelector('.form-calculator');\n    buttonF.addEventListener('click', function(){\n        _slideDown(blockHide, 500);\n        buttonF.style.display = 'none';\n    })\n    // Форма ========================\n    const form = document.getElementById('form');\n    form.addEventListener('submit', formSend);\n    async function formSend(e) {\n        e.preventDefault();\n        let error = formValidate(form);\n        \n        if(error === 0){\n            \n            form.submit();\n        }\n    }\n    // Проверка валидации формы\n    function formValidate(form) {\n        let error = 0; \n\n        let formReq = document.querySelectorAll('._req');\n            for(let input of formReq){\n                formRemoveError(input);\n            }\n            const phone = document.getElementById('phone');\n            if(phone.value === ''){\n                phone.classList.add('_error');\n                error++;\n            }\n            for (let index = 0; index < formReq.length; index++) {\n                const input = formReq[index];\n                if(input.classList.contains('_name')){\n                    if(!validateName(input.value)){\n                        formAddError(input);\n                        error++;\n                    }\n                }\n                if(input.classList.contains('_tel')){\n                    if(!ValidPhone(input.value)){\n                        formAddError(input);\n                        error++;\n                    }\n                }\n                if(input.classList.contains('_error')){\n                    error++;\n                }else{\n                    if(input.value === '') {\n                        formAddError(input);\n                        error++;\n                    }\n                }\n        \n            }\n            return error;\n    }\n    // Функции добавления/удаления классов\n    function formAddError(e) {\n        e.classList.add('_error');\n        \n    }\n    function formRemoveError(e) {\n        e.classList.remove('_error');\n        \n    }\n    // Функция валидации имени\n    function validateName(e) {\n        return String(e)\n        .toLowerCase()\n        .match(\n            /^[а-яА-я][а-яА-Я0-9-_\\.]{1,20}$/\n        );\n    };\n    function ValidPhone(e) {\n        const re = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im;\n        const valid = re.test(e);\n        return valid;\n    }  \n    //======= robots \n    \n   LottieInteractivity.create({\n    mode: 'scroll',\n    player: '#firstLottie',\n    container: '.robot--2',\n    actions: [\n        {\n            visibility: [0.2, 1],\n            type: 'seek',\n            frames: [20, 201],\n        },\n    ],\n    });\n    //=================\n    //SlideToggle\n    let _slideUp = (target, duration = 500) => {\n        if (!target.classList.contains('_slide')) {\n            target.classList.add('_slide');\n            target.style.transitionProperty = 'height, margin, padding';\n            target.style.transitionDuration = duration + 'ms';\n            target.style.height = target.offsetHeight + 'px';\n            target.offsetHeight;\n            target.style.overflow = 'hidden';\n            target.style.height = 0;\n            target.style.paddingTop = 0;\n            target.style.paddingBottom = 0;\n            target.style.marginTop = 0;\n            target.style.marginBottom = 0;\n            window.setTimeout(() => {\n                target.hidden = true;\n                target.style.removeProperty('height');\n                target.style.removeProperty('padding-top');\n                target.style.removeProperty('padding-bottom');\n                target.style.removeProperty('margin-top');\n                target.style.removeProperty('margin-bottom');\n                target.style.removeProperty('overflow');\n                target.style.removeProperty('transition-duration');\n                target.style.removeProperty('transition-property');\n                target.classList.remove('_slide');\n            }, duration);\n        }\n    }\n    let _slideDown = (target, duration = 500) => {\n        if (!target.classList.contains('_slide')) {\n            target.classList.add('_slide');\n            if (target.hidden) {\n                target.hidden = false;\n            }\n            let height = target.offsetHeight;\n            target.style.overflow = 'hidden';\n            target.style.height = 0;\n            target.style.paddingTop = 0;\n            target.style.paddingBottom = 0;\n            target.style.marginTop = 0;\n            target.style.marginBottom = 0;\n            target.offsetHeight;\n            target.style.transitionProperty = \"height, margin, padding\";\n            target.style.transitionDuration = duration + 'ms';\n            target.style.height = height + 'px';\n            target.style.removeProperty('padding-top');\n            target.style.removeProperty('padding-bottom');\n            target.style.removeProperty('margin-top');\n            target.style.removeProperty('margin-bottom');\n            window.setTimeout(() => {\n                target.style.removeProperty('height');\n                target.style.removeProperty('overflow');\n                target.style.removeProperty('transition-duration');\n                target.style.removeProperty('transition-property');\n                target.classList.remove('_slide');\n            }, duration);\n        }\n    }\n    let _slideToggle = (target, duration = 500) => {\n        if (target.hidden) {\n            return _slideDown(target, duration);\n        } else {\n            return _slideUp(target, duration);\n        }\n    }\n    _slideUp(blockHide, 0);\n});\n\n\n\n\n\n//# sourceURL=webpack://gulp-2022/./dist/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./dist/js/script.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;